name: Build, Push to ECR, Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_WORKER }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  # App settings placeholder variables → map to GitHub Secrets of the same name
  DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
  RABBITMQ_HOST: ${{ secrets.RABBITMQ_HOST }}
  RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Replace placeholders in appsettings files with secrets
        run: |
          set -euo pipefail
          files=(
            "src/IPSDataAcquisitionWorker.Worker/appsettings.json"
            "src/IPSDataAcquisitionWorker.Worker/appsettings.Production.json"
          )
          for f in "${files[@]}"; do
            [ -f "$f" ] || continue
            echo "Processing $f"
            # Find tokens like __NAME__
            mapfile -t tokens < <(grep -oE '__[A-Z0-9_]+__' "$f" | sort -u || true)
            for t in "${tokens[@]}"; do
              name=${t#__}; name=${name%__}
              val=${!name-}
              if [ -z "${val:-}" ]; then
                echo "Warning: no value found for $t (env $name). Leaving placeholder as-is." >&2
                continue
              fi
              # Use awk for reliable replacement (handles all special characters)
              awk -v placeholder="$t" -v value="$val" '
                {
                  # Simple string replacement without regex
                  while (index($0, placeholder)) {
                    pos = index($0, placeholder)
                    $0 = substr($0, 1, pos-1) value substr($0, pos+length(placeholder))
                  }
                  print
                }
              ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
            done
          done
          echo "Checking for any remaining placeholders..."
          if grep -q '__[A-Z0-9_]*__' src/IPSDataAcquisitionWorker.Worker/appsettings.Production.json; then
            echo "Warning: Some placeholders were not replaced:"
            grep -o '__[A-Z0-9_]*__' src/IPSDataAcquisitionWorker.Worker/appsettings.Production.json | sort -u
          else
            echo "✓ All placeholders successfully replaced"
          fi
          echo ""
          echo "Preview of updated appsettings.Production.json (first 20 lines):"
          head -n 20 src/IPSDataAcquisitionWorker.Worker/appsettings.Production.json || true
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker build -t ${IMAGE_URI} .
          docker push ${IMAGE_URI}
        shell: bash

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: Production

    steps:
      - name: Checkout (for compose files)
        uses: actions/checkout@v4

      - name: Prepare docker-compose.prod.yml with runtime values
        run: |
          set -euo pipefail
          compose="docker-compose.prod.yml"
          sed -i.bak -e "s#__IMAGE_URI__#${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}#g" "$compose"
          echo "Prepared compose file:" && cat "$compose"
        shell: bash

      - name: Upload compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "~/ips-data-acquisition-worker/"

      - name: Deploy on EC2 via SSH (docker compose)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_ACCOUNT_ID,AWS_REGION,ECR_REPOSITORY,IMAGE_TAG
          script: |
            set -euo pipefail
            ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            echo "Logging into ECR on EC2..."
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "Pulling and starting worker via docker compose..."
            
            mkdir -p ~/ips-data-acquisition-worker
            cd ~/ips-data-acquisition-worker
            sudo docker-compose -f docker-compose.prod.yml pull || true
            sudo docker-compose -f docker-compose.prod.yml up -d

            echo "Deployment finished for ${IMAGE_URI}"
        
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_WORKER }}
          IMAGE_TAG: ${{ github.sha }}

